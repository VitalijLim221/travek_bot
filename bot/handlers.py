# bot/handlers.py
from aiogram import Router, F
from aiogram.types import Message, Location
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import json

from bot.database import (
    save_user, get_user, update_user_interests, update_user_route,
    get_user_route, update_route_step, get_route_step,
    add_visited_object, add_points, get_shop_items
)
from bot.deepseek_integration import get_route_from_deepseek, get_interests_suggestions
from bot.location_utils import is_location_match, format_coordinates, calculate_distance
from bot.keyboards import (
    get_main_keyboard, get_profile_keyboard, get_settings_keyboard,
    get_route_settings_keyboard, get_shop_keyboard, get_back_keyboard,
    get_confirmation_keyboard, get_interests_suggestion_keyboard
)
from bot.config import POINTS_PER_OBJECT, LOCATION_ACCURACY

router = Router()


class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_interests = State()
    waiting_for_route_count = State()
    on_route = State()
    changing_interests = State()
    changing_phone = State()
    viewing_shop = State()


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user:
        await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(UserStates.waiting_for_name)


@router.message(UserStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(UserStates.waiting_for_phone)


@router.message(UserStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get('name')
    phone = message.text

    save_user(message.from_user.id, name, phone)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º—É–∑–µ–∏, –ø–∞—Ä–∫–∏, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞):")
    await state.set_state(UserStates.waiting_for_interests)


@router.message(UserStates.waiting_for_interests)
async def process_interests(message: Message, state: FSMContext):
    interests = message.text
    # Get suggestions from DeepSeek
    try:
        suggestions = get_interests_suggestions(interests)
        if suggestions and len(suggestions) > 0:
            await message.answer("–í–æ—Ç —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
                                 reply_markup=get_interests_suggestion_keyboard(suggestions))
            await state.update_data(original_interests=interests, interests_suggestions=suggestions)
            await state.set_state(UserStates.changing_interests)
            return
    except:
        pass

    update_user_interests(message.from_user.id, interests)
    await message.answer("‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=get_main_keyboard())
    await state.clear()


@router.message(UserStates.changing_interests)
async def process_interests_selection(message: Message, state: FSMContext):
    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        selected_interests = data.get('selected_interests', [])
        if selected_interests:
            interests_str = ", ".join(selected_interests)
            update_user_interests(message.from_user.id, interests_str)
            await message.answer(f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {interests_str}", reply_markup=get_main_keyboard())
        else:
            # Use original interests
            original = data.get('original_interests', '')
            update_user_interests(message.from_user.id, original)
            await message.answer(f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {original}", reply_markup=get_main_keyboard())
        await state.clear()
    elif message.text in (await state.get_data()).get('interests_suggestions', []):
        data = await state.get_data()
        selected = data.get('selected_interests', [])
        if message.text not in selected:
            selected.append(message.text)
            await state.update_data(selected_interests=selected)
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {message.text}")
    else:
        # Add custom interest
        data = await state.get_data()
        selected = data.get('selected_interests', [])
        if message.text not in selected:
            selected.append(message.text)
            await state.update_data(selected_interests=selected)
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {message.text}")


@router.message(F.text == "üß≠ –ü–æ–¥–æ–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def start_route_creation(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if not user or not user[5]:  # interests
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return

    await message.answer("–°–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ –º–∞—Ä—à—Ä—É—Ç–µ? (–æ—Ç 1 –¥–æ 20)")
    await state.set_state(UserStates.waiting_for_route_count)


@router.message(UserStates.waiting_for_route_count)
async def process_route_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if count < 1 or count > 20:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return

    await state.update_data(route_count=count)

    user = get_user(message.from_user.id)
    interests = user[5]  # interests column

    await message.answer("üïê –°–æ–∑–¥–∞—é –º–∞—Ä—à—Ä—É—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")

    # Generate route using DeepSeek
    route = get_route_from_deepseek(interests, count)

    if route:
        update_user_route(message.from_user.id, route)
        update_route_step(message.from_user.id, 0)

        route_text = "–í–∞—à –º–∞—Ä—à—Ä—É—Ç:\n\n"
        for i, obj in enumerate(route, 1):
            route_text += f"{i}. {obj['name']}\n   {obj['description']}\n"
            route_text += f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {format_coordinates(obj['latitude'], obj['longitude'])}\n\n"

        await message.answer(route_text, reply_markup=get_route_settings_keyboard())
        await state.set_state(UserStates.on_route)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
        await state.clear()


@router.message(F.location)
async def process_location(message: Message, state: FSMContext):
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –º–∞—Ä—à—Ä—É—Ç
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    route = get_user_route(message.from_user.id)
    step = get_route_step(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    if not route or len(route) == 0:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç.",
                             reply_markup=get_main_keyboard())
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –º–∞—Ä—à—Ä—É—Ç
    if step >= len(route):
        await message.answer("–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç.",
                             reply_markup=get_main_keyboard())
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –º–∞—Ä—à—Ä—É—Ç–∞
    current_object = route[step]
    target_lat = current_object['latitude']
    target_lon = current_object['longitude']
    object_name = current_object['name']

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–∏
    location_info = f"üìç –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {format_coordinates(user_lat, user_lon)}\n"
    location_info += f"üéØ –¶–µ–ª—å ({object_name}): {format_coordinates(target_lat, target_lon)}\n\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if is_location_match(user_lat, user_lon, target_lat, target_lon):
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ
        add_visited_object(message.from_user.id, current_object)
        add_points(message.from_user.id, POINTS_PER_OBJECT)

        success_message = f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–±—ä–µ–∫—Ç–∞: {object_name}\n"
        success_message += f"üìç –¢–æ—á–Ω–æ—Å—Ç—å: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {LOCATION_ACCURACY} –º–µ—Ç—Ä–æ–≤\n"
        success_message += f"üí∞ +{POINTS_PER_OBJECT} –±–∞–ª–ª–æ–≤\n\n"

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É
        next_step = step + 1
        update_route_step(message.from_user.id, next_step)

        if next_step < len(route):
            # –ï—Å—Ç—å –µ—â–µ –æ–±—ä–µ–∫—Ç—ã –≤ –º–∞—Ä—à—Ä—É—Ç–µ
            next_object = route[next_step]
            success_message += f"–°–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–∫—Ç: {next_object['name']}\n"
            success_message += f"{next_object['description']}\n"
            success_message += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {format_coordinates(next_object['latitude'], next_object['longitude'])}"
            await message.answer(success_message, reply_markup=get_route_settings_keyboard())
        else:
            # –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            total_points = len(route) * POINTS_PER_OBJECT
            success_message += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–µ—Å—å –º–∞—Ä—à—Ä—É—Ç!\n"
            success_message += f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {total_points} –±–∞–ª–ª–æ–≤"
            await message.answer(success_message, reply_markup=get_main_keyboard())
            await state.clear()
    else:
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        distance = calculate_distance(user_lat, user_lon, target_lat, target_lon)
        fail_message = location_info
        fail_message += f"‚ùå –í—ã –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–±—ä–µ–∫—Ç–∞ {object_name}\n"
        fail_message += f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏: {distance:.0f} –º–µ—Ç—Ä–æ–≤\n"
        fail_message += f"üéØ –¢—Ä–µ–±—É–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {LOCATION_ACCURACY} –º–µ—Ç—Ä–æ–≤\n\n"
        fail_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞."
        await message.answer(fail_message, reply_markup=get_route_settings_keyboard())


@router.message(F.text == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
async def request_location(message: Message):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –∏ –≤—ã–±—Ä–∞–≤ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è' –∏–ª–∏ 'Location'")


@router.message(F.text == "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤")
async def change_route_count(message: Message, state: FSMContext):
    await message.answer("–°–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ –º–∞—Ä—à—Ä—É—Ç–µ? (–æ—Ç 1 –¥–æ 20)")
    await state.set_state(UserStates.waiting_for_route_count)


@router.message(F.text == "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def recreate_route(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if not user or not user[5]:  # interests
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ —Å—Ç–∞–≤–∏–º 5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    route = get_user_route(message.from_user.id)
    count = len(route) if route and len(route) > 0 else 5

    await message.answer(f"–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç —Å {count} –æ–±—ä–µ–∫—Ç–∞–º–∏...")

    # Generate route using DeepSeek
    route = get_route_from_deepseek(user[5], count)

    if route:
        update_user_route(message.from_user.id, route)
        update_route_step(message.from_user.id, 0)

        route_text = "–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:\n\n"
        for i, obj in enumerate(route, 1):
            route_text += f"{i}. {obj['name']}\n   {obj['description']}\n"
            route_text += f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {format_coordinates(obj['latitude'], obj['longitude'])}\n\n"

        await message.answer(route_text, reply_markup=get_route_settings_keyboard())
        await state.set_state(UserStates.on_route)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
        await state.clear()


@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –º–∞—Ä—à—Ä—É—Ç–µ
    route = get_user_route(message.from_user.id)
    step = get_route_step(message.from_user.id)

    profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å:
–ò–º—è: {user[2]}
–¢–µ–ª–µ—Ñ–æ–Ω: {user[3]}
–ë–∞–ª–ª—ã: {user[4]}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: {len(user[7]) if user[7] else 0}
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –º–∞—Ä—à—Ä—É—Ç–µ
    if route and len(route) > 0:
        if step < len(route):
            current_object = route[step]
            profile_text += f"\nüß≠ –¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç: {len(route)} –æ–±—ä–µ–∫—Ç–æ–≤\n"
            profile_text += f"üìç –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç: {current_object['name']} ({step + 1}/{len(route)})"
        else:
            profile_text += f"\n‚úÖ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(route)} –æ–±—ä–µ–∫—Ç–æ–≤"

    await message.answer(profile_text, reply_markup=get_profile_keyboard())


@router.message(F.text == "üìä –ú–æ–∏ –±–∞–ª–ª—ã")
async def show_points(message: Message):
    user = get_user(message.from_user.id)
    if user:
        await message.answer(f"–í–∞—à–∏ –±–∞–ª–ª—ã: {user[4]}", reply_markup=get_main_keyboard())


@router.message(F.text == "üè™ –ú–∞–≥–∞–∑–∏–Ω")
async def show_shop(message: Message):
    items = get_shop_items()
    if not items:
        await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=get_main_keyboard())
        return

    shop_text = "üè™ –ú–∞–≥–∞–∑–∏–Ω:\n\n"
    for item in items:
        shop_text += f"{item[1]} - {item[3]} –±–∞–ª–ª–æ–≤\n{item[2]}\n\n"

    await message.answer(shop_text, reply_markup=get_shop_keyboard())


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_keyboard())


@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã")
async def change_interests(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:")
    await state.set_state(UserStates.changing_interests)


@router.message(F.text == "üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def change_phone(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(UserStates.changing_phone)


@router.message(UserStates.changing_phone)
async def process_phone_change(message: Message, state: FSMContext):
    # In a real app, you would update the phone in the database
    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_main_keyboard())
    await state.clear()


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())


# Fallback handler
@router.message()
async def fallback(message: Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())